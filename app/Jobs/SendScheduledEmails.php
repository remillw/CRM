<?php

namespace App\Jobs;

use App\Models\EmailCampaignSchedule;
use App\Services\EmailTrackingService;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Mail;
use App\Mail\CampaignEmail;

class SendScheduledEmails implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    public $timeout = 600; // 10 minutes timeout

    public function __construct(
        public EmailCampaignSchedule $schedule
    ) {}

    public function handle(EmailTrackingService $trackingService): void
    {
        Log::info("D√©marrage de l'envoi de la campagne programm√©e: {$this->schedule->name}");

        // V√©rifier que la campagne peut √™tre envoy√©e
        if (!$this->schedule->canBeSent()) {
            Log::warning("La campagne {$this->schedule->id} ne peut pas √™tre envoy√©e");
            return;
        }

        // Marquer comme en cours d'envoi
        $this->schedule->markAsStarted();

        $successCount = 0;
        $failureCount = 0;

        try {
            // R√©cup√©rer tous les contacts cibl√©s
            $contacts = $this->schedule->getTargetContacts()->get();

            Log::info("Envoi √† {$contacts->count()} contacts pour la campagne {$this->schedule->name}");

            foreach ($contacts as $contact) {
                try {
                    // Pr√©parer les variables pour ce contact
                    $variables = $trackingService->getContactVariables($contact);
                    
                    // Pr√©parer l'email avec tracking
                    $emailData = $trackingService->prepareEmailWithTracking(
                        $this->schedule->template, 
                        $contact, 
                        $variables
                    );
                    
                    // Cr√©er l'EmailSend record
                    // Pour les tests, utiliser null au lieu du campaign_id
                    $campaignId = $this->schedule->is_test ? null : $contact->campaign_id;
                    $emailSend = $trackingService->createEmailSend(
                        $contact,
                        $campaignId,
                        $emailData['tracking_id'],
                        $this->schedule->template->name
                    );
                    
                    // Associer √† la campagne programm√©e
                    $emailSend->update(['campaign_schedule_id' => $this->schedule->id]);

                    // Simuler l'envoi (vous pouvez int√©grer votre syst√®me d'envoi ici)
                    $this->sendEmail($contact, $emailData);
                    
                    $successCount++;
                    $this->schedule->incrementSentCount();
                    
                    Log::info("Email envoy√© avec succ√®s √† {$contact->email} ({$contact->business_name})");
                    
                    // D√©lai entre les envois pour √©viter d'√™tre marqu√© comme spam
                    $delay = $this->schedule->send_options['delay_seconds'] ?? 1;
                    if ($delay > 0) {
                        sleep($delay);
                    }
                    
                } catch (\Exception $e) {
                    $failureCount++;
                    $this->schedule->incrementFailedCount();
                    
                    Log::error("Erreur lors de l'envoi √† {$contact->email}: " . $e->getMessage());
                }
            }

            // Marquer comme termin√©
            $this->schedule->markAsCompleted();
            
            Log::info("Campagne {$this->schedule->name} termin√©e: {$successCount} succ√®s, {$failureCount} √©checs");
            
        } catch (\Exception $e) {
            // Marquer comme √©chou√©
            $this->schedule->markAsFailed();
            
            Log::error("Erreur critique lors de l'envoi de la campagne {$this->schedule->id}: " . $e->getMessage());
            throw $e;
        }
    }

    private function sendEmail($contact, $emailData): void
    {
        try {
            // Pour les tests, envoyer vraiment l'email
            if ($this->schedule->is_test) {
                Mail::to($contact->email)->send(
                    new CampaignEmail(
                        $emailData['subject'],
                        $emailData['content'],
                        $emailData['tracking_id']
                    )
                );
                
                Log::info("üìß EMAIL TEST ENVOY√â", [
                    'to' => $contact->email,
                    'subject' => $emailData['subject'],
                    'tracking_id' => $emailData['tracking_id'],
                    'business_name' => $contact->business_name,
                ]);
            } else {
                // Pour les envois normaux, simuler pour l'instant
                Log::info("üìß EMAIL SIMUL√â (production)", [
                    'to' => $contact->email,
                    'subject' => $emailData['subject'],
                    'tracking_id' => $emailData['tracking_id'],
                    'business_name' => $contact->business_name,
                ]);
                
                // Simuler une r√©ussite (vous pouvez retirer ceci quand vous int√©grez un vrai syst√®me d'envoi)
                if (rand(1, 100) <= 5) { // 5% de chance d'√©chec simul√©
                    throw new \Exception('Simulation d\'√©chec d\'envoi');
                }
            }
        } catch (\Exception $e) {
            Log::error("Erreur lors de l'envoi r√©el de l'email: " . $e->getMessage());
            throw $e;
        }
    }
}